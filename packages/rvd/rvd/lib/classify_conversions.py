from collections import OrderedDict
from typing import List, Dict


def classify_conversions(arrays: Dict[int, Dict[str, float]], conversion_classifications: List[dict], conversion_levels):
    """classify conversion by code and type using binned classes

    Args:
        arrays (dict): reach dictionaries with conversion type dictionaries to classify
        conversion_classifications (List(dict)): list of dicitionaries generated by conversion csv

    Returns:
        Dict: reach dictionary of conversion types and codes
    """

    bins = [v for v in conversion_levels if v["MaxValue"]]
    # OrderedDict([("Very Minor", 0.1),
    # ("Minor", 0.25),
    # ("Moderate", 0.5),
    # ("Significant", 1.0)])  # value <= bin

    unknown_code = next(item["ConversionID"] for item in conversion_classifications if item['ConversionType'] == 'NoChange' and item['ConversionLevel'] == 'Unknown')

    output = {}

    pos_classes = {value["ConversionType"]: value for value in conversion_classifications if int(value["TypeValue"]) > 0}
    neg_classes = {value["ConversionType"]: value for value in conversion_classifications if int(value["TypeValue"]) < 0}
    for reach_id, reach_values in arrays.items():
        pos_reach_values = {key: reach_values[key] for key in pos_classes.keys()}
        neg_reach_values = {key: reach_values[key] for key in neg_classes.keys()}
        reach_values["RiparianTotal"] = sum(list(neg_reach_values.values()))

        # Case 2 No Change
        if reach_values["NoChange"] >= 0.85:  # no change is over .85
            reach_values["ConversionID"] = next((item["ConversionID"] for item in conversion_classifications if item["ConversionType"] == 'NoChange' and item["ConversionLevel"] == "NoChange (>90%)"), unknown_code)
            output[reach_id] = reach_values
        # Case 2 Conversion to Riparian
        elif all([value < reach_values['RiparianTotal'] for value in pos_reach_values.values()]):
            for b in bins:
                if reach_values["RiparianTotal"] <= b["MaxValue"]:
                    reach_values["ConversionID"] = next((item["ConversionID"] for item in conversion_classifications if item['LevelID'] == b["LevelID"] and item['ConversionType'] == 'Riparian'), unknown_code)
                    output[reach_id] = reach_values
                    break

        # Case 3 Conversion from Riparian
        elif any([v > 0.0 for v in pos_reach_values.values()]):
            largest_class = max(pos_reach_values, key=pos_reach_values.get)

            for b in bins:
                if reach_values[largest_class] <= b['MaxValue']:  # check
                    reach_values["ConversionID"] = next((item["ConversionID"] for item in conversion_classifications if item['LevelID'] == b["LevelID"] and item['ConversionType'] == largest_class), unknown_code)
                    output[reach_id] = reach_values
                    break
        else:
            reach_values["ConversionID"] = unknown_code
            output[reach_id] = reach_values
    return output
