from collections import OrderedDict
from typing import List, Dict


def classify_conversions(arrays: Dict[int, Dict[str, float]], conversion_classifications: List[dict]):
    """classify conversion by code and type using binned classes

    Args:
        arrays (dict): reach dictionaries with conversion type dictionaries to classify
        conversion_classifications (List(dict)): list of dicitionaries generated by conversion csv

    Returns:
        Dict: reach dictionary of conversion types and codes
    """

    bins = OrderedDict([("Very Minor", 0.1),
                        ("Minor", 0.25),
                        ("Moderate", 0.5),
                        ("Significant", 1.0)])  # value <= bin
    output = {}

    pos_classes = {value["ConversionType"]: value for value in conversion_classifications if int(value["ConversionID"]) > 0}
    neg_classes = {value["ConversionType"]: value for value in conversion_classifications if int(value["ConversionID"]) < 0}
    for reach_id, reach_values in arrays.items():
        pos_reach_values = {key: reach_values[key] for key in pos_classes.keys()}
        neg_reach_values = {key: reach_values[key] for key in neg_classes.keys()}
        sum_neg_classes = sum(list(neg_reach_values.values()))

        if reach_values["NoChange"] >= 0.85:  # no change is over .85
            reach_values["ConversionCode"] = 1
            reach_values["ConversionType"] = "No Change"
            output[reach_id] = reach_values
        elif all([value < sum_neg_classes for value in pos_reach_values.values()]):
            for text, b, code in zip(bins.keys(), bins.values(), [70, 71, 72, 73]):
                if sum_neg_classes <= b:
                    reach_values["ConversionCode"] = int(code)
                    reach_values["ConversionType"] = f"{text} {f'Change' if text in ['Very Minor', 'Minor'] else 'Riparian Expansion'}"
                    output[reach_id] = reach_values
                    break
        elif any([v > 0.0 for v in pos_reach_values.values()]):
            key = max(pos_reach_values, key=pos_reach_values.get)
            classification = pos_classes[key]
            for text, b in bins.items():
                if reach_values[key] <= b:  # check
                    reach_values["ConversionCode"] = int(classification[text.replace(" ", "")])
                    reach_values["ConversionType"] = f"{text} {f'Change' if text in ['Very Minor', 'Minor'] else f'Conversion to {key}'}"
                    output[reach_id] = reach_values
                    break
        else:
            reach_values["ConversionCode"] = 0
            reach_values["ConversionType"] = f"Unknown"
            output[reach_id] = reach_values
    return output
